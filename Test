import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.Map;

public class RestRequestBuilder {

    public static String buildRequest() {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode rootNode = coreJsonGenerator(objectMapper);

        JsonNode messagesNode = createNode(objectMapper, createMessagesNode(objectMapper));
        JsonNode subjectAreaContextNode = createNode(objectMapper, createSubjectAreaContextNode(objectMapper));

        rootNode = updateNode(rootNode, "messages", messagesNode);
        rootNode = updateNode(rootNode, "subjectAreaContext", subjectAreaContextNode);

        return rootNode.toString();
    }

    private static ObjectNode coreJsonGenerator(ObjectMapper objectMapper) {
        ObjectNode rootNode = objectMapper.createObjectNode();
        rootNode.put("model", "gpt-4");
        rootNode.put("temperature", 0.1);
        rootNode.put("stream", false);
        rootNode.put("subjectArea", "CALL_TRANSCRIPTS");
        return rootNode;
    }

    private static ArrayNode createMessagesNode(ObjectMapper objectMapper) {
        ArrayNode messagesArray = objectMapper.createArrayNode();
        messagesArray.add(createMessageObject(objectMapper, "system", "You are a helpful assistant."));
        messagesArray.add(createMessageObject(objectMapper, "system", "Given the following call transcripts XYZ......."));
        messagesArray.add(createMessageObject(objectMapper, "user", "Summarize the last 3 earnings reports?"));
        messagesArray.add(createMessageObject(objectMapper, "assistant", "A summarization of the 3 earnings report are as follows ...."));
        messagesArray.add(createMessageObject(objectMapper, "user", "Was anything mentioned about future prospects?"));
        return messagesArray;
    }

    private static ObjectNode createMessageObject(ObjectMapper objectMapper, String role, String content) {
        ObjectNode messageObject = objectMapper.createObjectNode();
        messageObject.put("role", role);
        messageObject.put("content", content);
        return messageObject;
    }

    private static ObjectNode createSubjectAreaContextNode(ObjectMapper objectMapper) {
        ObjectNode subjectAreaContext = objectMapper.createObjectNode();
        ArrayNode callTranscriptsArray = objectMapper.createArrayNode();
        callTranscriptsArray.add("CompanyNameCallTranscriptYYYYQ1");
        callTranscriptsArray.add("CompanyNameCallTranscriptYYYYQ2");
        callTranscriptsArray.add("CompanyNameCallTranscriptYYYYQ3");
        subjectAreaContext.set("callTranscripts", callTranscriptsArray);
        return subjectAreaContext;
    }

    private static JsonNode createNode(ObjectMapper objectMapper, ObjectNode node) {
        return objectMapper.valueToTree(node);
    }

    private static ObjectNode updateNode(ObjectNode rootNode, String fieldName, JsonNode newNode) {
        rootNode.set(fieldName, newNode);
        return rootNode;
    }

    // Example usage
    public static void main(String[] args) {
        String jsonRequest = RestRequestBuilder.buildRequest();
        System.out.println(jsonRequest);
    }
}
